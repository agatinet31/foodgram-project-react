# Generated by Django 2.2.16 on 2022-09-13 09:25

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(help_text='Required. Enter first name, please. 150 characters or fewer. Letters only.', max_length=150, validators=[django.core.validators.RegexValidator(re.compile('^[^\\W\\d_]+$'), 'Enter a valid string value consisting of only letters.', 'invalid')], verbose_name='first name')),
                ('last_name', models.CharField(help_text='Required. Enter last name, please. 150 characters or fewer. Letters only.', max_length=150, validators=[django.core.validators.RegexValidator(re.compile('^[^\\W\\d_]+$'), 'Enter a valid string value consisting of only letters.', 'invalid')], verbose_name='last name')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. A valid email address, please. 254 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=254, unique=True, validators=[django.core.validators.EmailValidator], verbose_name='email')),
                ('password', models.CharField(max_length=150, verbose_name='password')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['username'],
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_subscriber', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='date subscriber')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author_subscribers', to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_subscribers', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'subscriber',
                'verbose_name_plural': 'subscribers',
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='subscribed',
            field=models.ManyToManyField(blank=True, help_text='Subscribed for this user.', related_name='my_subscribers', through='users.Subscriber', to=settings.AUTH_USER_MODEL, verbose_name='subscribed'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='subscriber',
            constraint=models.UniqueConstraint(fields=('user', 'author'), name='unique_user_author_subscriber'),
        ),
        migrations.AddConstraint(
            model_name='subscriber',
            constraint=models.CheckConstraint(check=models.Q(_negated=True, user_id=django.db.models.expressions.F('author_id')), name='check_not_loop_user_author'),
        ),
        migrations.AddConstraint(
            model_name='customuser',
            constraint=models.CheckConstraint(check=models.Q(_negated=True, username__iexact='ME'), name='reserve_USER_ME'),
        ),
    ]
